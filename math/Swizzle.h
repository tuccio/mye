#pragma once

#include <boost/preprocessor/cat.hpp>

#include <boost/preprocessor/arithmetic/add.hpp>
#include <boost/preprocessor/arithmetic/div.hpp>
#include <boost/preprocessor/arithmetic/mod.hpp>
#include <boost/preprocessor/arithmetic/mul.hpp>

#include <boost/preprocessor/comparison/equal.hpp>

#include <boost/preprocessor/facilities/apply.hpp>
#include <boost/preprocessor/facilities/empty.hpp>
#include <boost/preprocessor/facilities/overload.hpp>

#include <boost/preprocessor/if.hpp>
#include <boost/preprocessor/iteration/local.hpp>

#include <boost/preprocessor/list/cat.hpp>
#include <boost/preprocessor/list/for_each.hpp>
#include <boost/preprocessor/list/size.hpp>
#include <boost/preprocessor/list/to_tuple.hpp>
#include <boost/preprocessor/list/transform.hpp>

#include <boost/preprocessor/repetition/repeat_from_to.hpp>
#include <boost/preprocessor/repetition/repeat.hpp>

#include <boost/preprocessor/seq/elem.hpp>
#include <boost/preprocessor/seq/for_each_i.hpp>
#include <boost/preprocessor/seq/for_each.hpp>
#include <boost/preprocessor/seq/for_each_product.hpp>
#include <boost/preprocessor/seq/to_tuple.hpp>
#include <boost/preprocessor/seq/to_list.hpp>

#include <boost/preprocessor/tuple/elem.hpp>
#include <boost/preprocessor/tuple/to_list.hpp>

//#define __MYE_MATH_SWIZZLE_MIN_LENGTH 2
//#define __MYE_MATH_SWIZZLE_MAX_LENGTH 4
//
//#define __MYE_MATH_POW_IMPL(I, X, A) * A
//#define __MYE_MATH_POW(A, N) 1 BOOST_PP_REPEAT(N, __MYE_MATH_POW_IMPL, A)
//
//#define __MYE_MATH_VECTOR_ELEMENTS_VEC2 (x)(r)(u)(y)(g)(v)
//#define __MYE_MATH_VECTOR_ELEMENTS_VEC3 (x)(r)(u)(y)(g)(v)(z)(b)(t)
//#define __MYE_MATH_VECTOR_ELEMENTS_VEC4 (x)(y)(z)(w)
//
//#define __MYE_MATH_VECTOR_ELEMENTS_0 (x)(r)(u)
//#define __MYE_MATH_VECTOR_ELEMENTS_1 (y)(g)(v)
//#define __MYE_MATH_VECTOR_ELEMENTS_2 (z)(b)(t)
//#define __MYE_MATH_VECTOR_ELEMENTS_3 (w)(a)
//#define __MYE_MATH_VECTOR_ELEMENTS (__MYE_MATH_VECTOR_ELEMENTS_0)(__MYE_MATH_VECTOR_ELEMENTS_1)(__MYE_MATH_VECTOR_ELEMENTS_2)(__MYE_MATH_VECTOR_ELEMENTS_3)
//#define __MYE_MATH_VECTOR_ELEMENTS_TO_LIST(r, product) (BOOST_PP_SEQ_TO_LIST(product))
//
//#define __MYE_MATH_VECTOR_ELEMENTS_VECTOR2 BOOST_PP_SEQ_FOR_EACH_PRODUCT(__MYE_MATH_VECTOR_ELEMENTS_TO_LIST,\
//	(__MYE_MATH_VECTOR_ELEMENTS_VEC2)\
//	(__MYE_MATH_VECTOR_ELEMENTS_VEC2)
//
//#define __MYE_MATH_VECTOR_ELEMENTS_VECTOR4 BOOST_PP_SEQ_FOR_EACH_PRODUCT(__MYE_MATH_VECTOR_ELEMENTS_TO_LIST,\
//	(__MYE_MATH_VECTOR_ELEMENTS_VEC4)\
//	(__MYE_MATH_VECTOR_ELEMENTS_VEC4)\
//	(__MYE_MATH_VECTOR_ELEMENTS_VEC4)\
//	(__MYE_MATH_VECTOR_ELEMENTS_VEC4))
//#define __MYE_MATH_VECTOR_ELEMENTS_COUNT(N) BOOST_PP_MUL
//#define __MYE_MATH_VECTOR_DEFINE_GET \
//	template <int i> inline T Get(void) const { return *(m_data + i); }\
//#define __MYE_MATH_VECTOR_DEFINE_SWIZZLE \
//	template <int ... i> inline Matrix<T, sizeof ... (i), 1> Swizzle(void) const { return Matrix<T, sizeof ... (i), 1>(Get<i>() ...); }
//#define __MYE_MATH_VECTOR_SWIZZLE_ENUM_IMPL(I, X, D) 
//#define __MYE_MATH_VECTOR_SWIZZLE_ENUM(LENGTH, N) BOOST_PP_REPEAT(__MYE_MATH_POW(N, LENGTH), __MYE_MATH_VECTOR_SWIZZLE_ENUM_IMPL, _)
//#define __MYE_MATH_VECTOR_GENERATE_SWIZZLE_FUNCTIONS_BY_LENGTH(LENGTH, MAX, N)
//#define __MYE_MATH_VECTOR_GENERATE_SWIZZLE_FUNCTIONS(N) BOOST_PP_REPEAT_FROM_TO(__MYE_MATH_SWIZZLE_MIN_LENGTH, BOOST_PP_ADD(__MYE_MATH_SWIZZLE_MAX_LENGTH, 1), __MYE_MATH_VECTOR_GENERATE_SWIZZLE_FUNCTIONS_BY_LENGTH, N)
//#define __MYE_MATH_VECTOR_SWIZZLE_ELEMENTS_ENUM_IMPL(I, X, D) ()
//#define __MYE_MATH_VECTOR_SWIZZLE_ELEMENTS_ENUM BOOST_PP_REPEAT(LENGTH) (LENGTH, __MYE_MATH_VECTOR_SWIZZLE_ELEMENTS_ENUM_IMPL, BOOST_PP_EMPTY)
//
//#define __TEST(r,p) (BOOST_PP_SEQ_TO_TUPLE(p))
//#define __SEQ2 BOOST_PP_SEQ_FOR_EACH_PRODUCT(__TEST, (__MYE_MATH_VECTOR_ELEMENTS_VEC2)(__MYE_MATH_VECTOR_ELEMENTS_VEC2))
//#define __MYE_MATH_SWIZZLE_MAKE_FUNCTION_NAME(R, D, TUPLE) BOOST_PP_LIST_CAT(BOOST_PP_TUPLE_TO_LIST(TUPLE))

//#define __SEQ2 BOOST_PP_SEQ_FOR_EACH_PRODUCT(__TEST, (__MYE_MATH_VECTOR_ELEMENTS_VEC2)(__MYE_MATH_VECTOR_ELEMENTS_VEC2))
//#define __MYE_MATH_SWIZZLE_MAKE_FUNCTION_NAME(R, D, TUPLE) BOOST_PP_LIST_CAT(BOOST_PP_TUPLE_TO_LIST(TUPLE))
//
//
//#define __MYE_MATH_SWIZZLE_IMPL_2(R, D, ELEM) ELEM
//#define __MYE_MATH_SWIZZLE_IMPL(R, D, ELEM) Matrix<T, BOOST_PP_LIST_SIZE(ELEM), 1> BOOST_PP_SEQ_FOR_EACH(__MYE_MATH_SWIZZLE_MAKE_FUNCTION_NAME, BOOST_PP_EMPTY, __SEQ2) (void) const { return Matrix<T, BOOST_PP_LIST_SIZE(ELEM), 1> BOOST_PP_LIST_TO_TUPLE(ELEM) ; }
//#define __MYE_MATH_SWIZZLE_IMPL3(R, D, ELEM) ELEM
//
//#define __MYE_MATH_SWIZZLE_VECTOR2 BOOST_PP_SEQ_FOR_EACH(__MYE_MATH_SWIZZLE_IMPL3, BOOST_PP_EMPTY, __MYE_MATH_VECTOR_ELEMENTS_VECTOR2)

#define __MYE_MATH_SWIZZLE_SEQ_TO_TUPLE(r,p) (BOOST_PP_SEQ_TO_TUPLE(p))

#define __MYE_MATH_SWIZZLE_CARTESIAN_PRODUCT_MAKE(Z, I, D) (D)
#define __MYE_MATH_SWIZZLE_CARTESIAN_PRODUCT(SEQ, LENGTH) BOOST_PP_REPEAT(LENGTH, __MYE_MATH_SWIZZLE_CARTESIAN_PRODUCT_MAKE, SEQ)

#define __MYE_MATH_SWIZZLE_BY_LENGTH(SEQ, LENGTH) BOOST_PP_SEQ_FOR_EACH_PRODUCT(__MYE_MATH_SWIZZLE_SEQ_TO_TUPLE,  __MYE_MATH_SWIZZLE_CARTESIAN_PRODUCT(SEQ, LENGTH))

#define __MYE_MATH_SWIZZLE_CALL(R, DATA, ELEM) BOOST_PP_CAT(ELEM,BOOST_PP_LPAREN()BOOST_PP_RPAREN())
#define __MYE_MATH_SWIZZLE_MAKE_FUNCTION_NAME(R, D, TUPLE) BOOST_PP_LIST_CAT(BOOST_PP_TUPLE_TO_LIST(TUPLE))
#define __MYE_MATH_SWIZZLE_MAKE_FUNCTION(R, D, TUPLE) Matrix<T, BOOST_PP_LIST_SIZE(BOOST_PP_TUPLE_TO_LIST(TUPLE)), 1> BOOST_PP_LIST_CAT(BOOST_PP_TUPLE_TO_LIST(TUPLE)) (void) const { return Matrix<T, BOOST_PP_LIST_SIZE(BOOST_PP_TUPLE_TO_LIST(TUPLE)), 1> BOOST_PP_LIST_TO_TUPLE(BOOST_PP_LIST_TRANSFORM(__MYE_MATH_SWIZZLE_CALL, BOOST_PP_EMPTY(), BOOST_PP_TUPLE_TO_LIST(TUPLE))); }

#define __MYE_MATH_VECTOR_ELEMENTS_GET_PAIR(E, N) (BOOST_PP_SEQ_ELEM(BOOST_PP_MUL(2, N), E))(BOOST_PP_SEQ_ELEM(BOOST_PP_INC(BOOST_PP_MUL(2, N)), E))

#define __MYE_MATH_SWIZZLE_CARTESIAN_PRODUCT_BAKER_4(ELEMENT, A, B, C, D) (__MYE_MATH_VECTOR_ELEMENTS_GET_PAIR(ELEMENT, A))(__MYE_MATH_VECTOR_ELEMENTS_GET_PAIR(ELEMENT, B))(__MYE_MATH_VECTOR_ELEMENTS_GET_PAIR(ELEMENT, C))(__MYE_MATH_VECTOR_ELEMENTS_GET_PAIR(ELEMENT, D))
#define __MYE_MATH_SWIZZLE_CARTESIAN_PRODUCT_BAKER_3(ELEMENT, A, B, C) (__MYE_MATH_VECTOR_ELEMENTS_GET_PAIR(ELEMENT, A))(__MYE_MATH_VECTOR_ELEMENTS_GET_PAIR(ELEMENT, B))(__MYE_MATH_VECTOR_ELEMENTS_GET_PAIR(ELEMENT, C))
#define __MYE_MATH_SWIZZLE_CARTESIAN_PRODUCT_BAKER_2(ELEMENT, A, B) (__MYE_MATH_VECTOR_ELEMENTS_GET_PAIR(ELEMENT, A))(__MYE_MATH_VECTOR_ELEMENTS_GET_PAIR(ELEMENT, B))
#define __MYE_MATH_SWIZZLE_CARTESIAN_PRODUCT_BAKER_1(ELEMENT, A) (__MYE_MATH_VECTOR_ELEMENTS_GET_PAIR(ELEMENT, A))

#define __MYE_MATH_SWIZZLE_CARTESIAN_PRODUCT_BAKER(ELEMENT, ...) BOOST_PP_CAT(BOOST_PP_OVERLOAD(__MYE_MATH_SWIZZLE_CARTESIAN_PRODUCT_BAKER_,__VA_ARGS__)(ELEMENT, __VA_ARGS__),BOOST_PP_EMPTY())

#define __MYE_MATH_SWIZZLE_VECTOR_BY_SUBS(ELEMENTS, ...) BOOST_PP_SEQ_FOR_EACH_PRODUCT(__MYE_MATH_SWIZZLE_SEQ_TO_TUPLE, __MYE_MATH_SWIZZLE_CARTESIAN_PRODUCT_BAKER(ELEMENTS, __VA_ARGS__))

#define __MYE_MATH_SWIZZLE_EM_ALL(ELEMENTS, ...) BOOST_PP_SEQ_FOR_EACH(__MYE_MATH_SWIZZLE_MAKE_FUNCTION, BOOST_PP_EMPTY, __MYE_MATH_SWIZZLE_VECTOR_BY_SUBS(ELEMENTS, __VA_ARGS__))